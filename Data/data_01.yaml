# @字符串 ---{'name': 'lili', 'Name': 'lili'}
#name: 'lili'
#Name: 'lili'

# @字符串 -另一种写法 ---{'name_str': 'lili', 'Name_str': 'sasa'}
#name_str: lili
#Name_str: sasa

# @整数、浮点数 ---{'int_value': 122, 'float_value': 12.00001}
#int_value: 122
#float_value: 12.00001

# ------布尔值------
# @yaml布尔值 ---{'bool01': True, 'bool02': False}
#bool01: true
#bool02: false
# @python布尔值 ---{'bool03': True, 'bool04': False}
#bool03: True
#bool04: False

# ------空类型-------
# @yaml表示 ---{'value1': None}
#value1: ~
# @python表示 ---{'value2': 'None', 'value3': 'none'}
# @该方式不支持使用
#value2: None
#value3: none
# @python空表示 ---{'value4': None}
#value4:
# @js shell java表示 ---{'value5': None, 'value6': None}
#value5: Null
#value6: null

# ------日期类型-------
# @多语言时间转换，数据库存储
# @返回datetime.datetime时间类型 ---{'data1': datetime.datetime(2020, 6, 27, 11, 23, 12)}
#data1: 2020-06-27 11:23:12
# @一般不会用到
# @返回datetime.date时间类型 ---{'data2': datetime.date(2020, 6, 27)}
#data2: 2020-06-27
# @返回int类型，注意 ---{'data3': 40992}
#data3: 11:23:12
# @如果获取时分秒，应以字符串形式传递 ---{'data4': '11:23:12'}
#data4: '11:23:12'
# @当时分秒出现个位数时，前面必须补0，不会返回日期类型，会返回字符串 ---{'data5': '2020-06-27 1:1:1'}
#data5: 2020-06-27 1:1:1
# @当日期出现个位数时，前吗必须补0，注意 ---{'data6': '2020-6-27'}
#data6: 2020-6-27

# @对象 - 第一种写法
#info: {'name':'lili','age':'18'}

# @对象 - 第二种写法
#info:
#  name: 'lili'
#  age: '18'

# @列表 ---{'data': ['lili', '女', '18']}
# @yaml数组 -：代表列表
#data:
#  - 'lili'
#  - '女'
#  - '18'

# @python 列表 ---{'data': ['nana', '男']}
#data: ['nana','男']

# @json 格式 ---{'data': [{'name': '张三'}, {'name': '李四'}]}
#data:
#  - name: '张三'
#  - name: '李四'